// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3482.robot.subsystems;

import org.usfirst.frc.team3482.robot.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Arm extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //DoubleSolenoid doubleSolenoid1 = RobotMap.armsDoubleSolenoid1;
    SpeedController speedController1 = RobotMap.armSpeedController1;
    SpeedController speedController2 = RobotMap.armSpeedController2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    /*public void extend()
    {
    	doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    }
    
    public void retract()
    {
    	doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    }
    public boolean isExtended() 
    {
    	 return doubleSolenoid1.get() == DoubleSolenoid.Value.kForward;
    }
    */
    public void runMotorsIn()
    {
    	speedController1.set(-0.8);
    }
    public void runSecondMotorsIn()
    {
    	speedController2.set(-0.8);
    }
    
    
    public void runWithXboxController(Joystick s) {
		double leftY = s.getRawAxis(1);
		double rightY = s.getRawAxis(5);
		//sensitivity /= 100;
		double deadZone = 0.1;

		if (leftY < deadZone && leftY > -deadZone) {
			leftY = 0;
		}
		
		if (rightY < deadZone && rightY > -deadZone) {
			rightY = 0;
		}
		//rightX *= sensitivity;
		speedController1.set(leftY);
		speedController2.set(rightY);
		/*if (leftY < -0.2) {
			Robot.clamp.extend();
			//Timer.delay(1);
		}*/
	}
    public void stopWheels() {
    	speedController1.set(0.0);
    }
    
    public void stopSecondWheels() {
    	speedController2.set(0.0);
    }
    
    public void runMotorsOut()
    {
    	speedController1.set(0.8);
    }
    
    public void runSecondMotorsOut()
    {
    	speedController2.set(0.8);
    }
}

