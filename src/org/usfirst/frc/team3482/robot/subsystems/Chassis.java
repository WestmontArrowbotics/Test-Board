// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3482.robot.subsystems;

import org.usfirst.frc.team3482.robot.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Chassis extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Compressor compressor1 = RobotMap.chassisCompressor1;

	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		//setDefaultCommand(new MySpecialCommand());

	}
	public void startCompressor() {
		System.out.println("starting");
		compressor1.start();
	}

	public void stopCompressor() {
		compressor1.stop();
	}

	//inverts the motors

	public void invertMotors() {
		System.out.println("YO THE MOTORS WERE JUST INVERTED, WATCH OUT MAN");
	}
	//drives the robot with a joystick - normal configuration

	public void driveWithJoystick(Joystick s) {

		double deadZone = .2;
		double yAxis = s.getAxis(Joystick.AxisType.kY);
		double xAxis = s.getTwist();
		if (s.getRawButton(1)) {
			xAxis *= 0.6;
		}
		// X sensitivity set by slider, Y sensitivity set by knob
		double knob = s.getAxis(Joystick.AxisType.kZ);
		knob = 1 - (knob / 2);    // Format input from Z Axis
		yAxis *= knob;
		// If the X or Y axes are in the deadzone, flip them to zero.
		if (xAxis < deadZone && xAxis > -deadZone) {
			xAxis = 0;
		}
		if (yAxis < deadZone && yAxis > -deadZone) {
			yAxis = 0;
		}
	}
	//drives the robot with a joystick - xbox configuration

	public void driveWithXboxController(Joystick s) {
		double leftY = s.getRawAxis(1);

		double rightX = s.getRawAxis(4);
		
		//sensitivity /= 100;
		double deadZone = 0.1;

		if (leftY < deadZone && leftY > -deadZone) {
			leftY = 0;
		}
		if (rightX < deadZone && rightX > -deadZone) {
			rightX = 0;
		}
		//rightX *= sensitivity;
	}

	//moves the robot to a location
	public void move(double moveValue, double rotateValue) {
	}
	//stops the robot

	public void stop() {
	}
	//sets the safety

	public void setSafety(boolean n) {
	}

	public boolean isBackExtended(Joystick s) {
		return s.getRawButton(5);
	}


}
